
@init

function cr()     
  ( gfx_y+=gfx_texth; ); 

  
//                                                                                                    TEXT and STRING functions>
function BreakNewlines_NumberedStrings(str,start_strnum)
//breaks a string with new line characters into an index of numbered strings starting at start_strnum (possible numbered strings are 0-1023)
local(offset,temp,i,breaks)
(
    i=offset=breaks=0;
    strcpy(temp=#,str);
    while( i<=strlen(str) ) (
      str_getchar(str, i)==10  || i==strlen(str) ? (
        start_strnum>=0 ? strcpy_substr(start_strnum,temp,offset,i-offset);
        offset=i+1;
        start_strnum+=1;
        breaks+=1;
      );
      i+=1;      
    );
    breaks;       
);

function BreakNewlines_NumberedStrings_limit(str,start_strnum,limit)
//can save a bit a cpu if you know exactly what string number you will need
local(offset,temp,i,breaks)
(
  i=offset=breaks=0;
  strcpy(temp=#,str);
  while( i<=strlen(str) && breaks<=limit) (
    str_getchar(str, i)==10 ? (
      breaks!=limit ? strcpy_substr(start_strnum,temp,offset,i-offset):
        strcpy_substr(start_strnum,temp,offset); 
      offset=i+1;
      start_strnum+=1;
      breaks+=1;
    );
    i+=1;
  );
  breaks;    
);

function init_was_clicked() local(init)
//mouse logic used in text_field
  (!init ? (was_clicked=-1; init=1); );  
  
function max_char(max_char)local(w,h)
//used to determine the number of character avalible for a text field
  (gfx_measurestr("0",w,h); w*max_char);  
  
function text_field(varstr,max_char,field_color)//text color is current color
//creates a user-enterable text box and returns the string on ENTER or click outside of the box
//if field_color is negative, no box is drawn 
// was_clicked is a global variable to help differientate between boxes.
// I forgot what pr was supposed to stand for ??????? Ha ha ha
local(strw,strh,next,i,curoff,curoffw,strh,temp,pr,rp,_1st_click,x,y,set,ww,text_color,set)
(
  set=0;
  x=gfx_x; y=gfx_y; 
  ww=max_char(max_char);
  text_color=pack_rgb();//store current color for text
  field_color >0 ? (
    setcolor(field_color);//set field color. -1 draws no box.
    gfx_rect(x-2,y,ww+4,gfx_texth);
  );  
  setcolor(text_color);  
  mouse_in_rect(x,y,ww,gfx_texth) && mouse_click(1) ? ( 
    was_clicked=xymask(x,y);
    //set=0;
  );  
//Field ACTIVE  !!!
  was_clicked==xymask(x,y) ? (  
    /*define temp strings*/    
    temp=#; curoff=#;      
    /*at click set 'next' to strlen*/
    _1st_click == 0 ? (next=strlen(varstr); _1st_click=1);             
    pr=gfx_getchar(0); //gets the user input                  
    //*validate all characters except backspace, ENTER, and arrows                                  
    pr && (pr!=8 && pr!=1818584692 && pr!=1919379572 && pr!=13) ? (     
      //format input to temp  //append input to string  //reset 'next' flag                       
      sprintf(temp, "%c", pr);  strcat(varstr,temp); next=strlen(varstr);                                     
    );     
  /*backspace*/ 
    pr == 8 ? (     
      next=max(next-=1,0); strcpy_substr(varstr,varstr, 0, next); //deincrement next //copy to self                 
    );       
  /*left arrow*/
    pr == 1818584692 ? (
    //decrease next flag //copy string from next offset (last character) to (new)temp              
      next=max(next-=1,0); strcpy_from(temp=#,varstr,next); 
    //if cursor is already offset, append curoff to temp  //copy last character to curoff                            
      strlen(curoff) ? strcat(temp,curoff); strcpy(curoff, temp); 
    //copy string minus count back to self and reset next                                                                      
      strcpy_substr(varstr,varstr, 0, next); next=strlen(varstr);         
    ); 
  /*right arrow*/
    pr == 1919379572 ? ( 
    //increment next (unless already at end of string)            
      next=min(next+=1,strlen(varstr));
    //if cursor is already offset, append 1st char of curoff to string    
      strlen(curoff) ? strncat(varstr,curoff,1);
    //if the string is not null, copy curroff to self minus 1st char                           
      strlen(varstr) ? strcpy_from(curoff,curoff,1); 
    //reset next             
      next=strlen(varstr);
    ); 
  //measure string for cursor                                              
    gfx_measurestr(varstr,strw,strh); strlen(varstr) == 0 ? strw=0;                            
  //switching ~ every second, draw cursor     
    i+=1; i == 30 ? i=0; i > 15 ? gfx_line(x+strw,y+2,x+strw,y+gfx_texth-2);
  //print string                 
    gfx_printf(varstr);
  //and cursor offset string (if present)                                           
    strlen(curoff) ? gfx_printf(curoff); 
    
    !mouse_in_rect(x,y,ww,gfx_texth) && mouse_cap ?  (
      
      was_clicked==xymask(x,y) ? (
        was_clicked=-1;
        set=1;
      );  
    );
  /*ENTER*/  //exit on ENTER or click outside the box                      
    pr == 13 || was_clicked!=xymask(x,y) || set ? (
      !set ? set=1; 
    //add curoffset string to string //clear the string
      strcat(varstr,curoff); strncpy(curoff,curoff,0);   
    //clear clicked values                             
      _1st_click=0; was_clicked=-1;    
                                    
    );
           
  ):(   
/*if box inactive*/
    was_clicked==-1 ? rp=gfx_getchar(); //text overflow fix
    gfx_printf(varstr);  
    set;                                              
  ); 
  set;
);


function num_field(var,flen,format,varstr)//flen = "field length"
//useage example:  this=text_field(this,txt_w("000"),"%i",_this=#);
//the varstr input, even if a temporary string, prevents having to use instance()
local(strw,strh,next,i,curoff,curoffw,strh,temp,pr,rp,_1st_click,m,x,y,__clicked)
(
  x=gfx_x; y=gfx_y; //m=mouse_in_rect(x,y,flen,gfx_texth);
  //was_not_was_clicked(x,y,flen,gfx_texth);
  mouse_in_rect(x,y,flen,gfx_texth) && mouse_cap==1 ? __clicked=xymask(x,y);
//Field ACTIVE  !!!
  __clicked==xymask(x,y) ? ( 
//define temp strings  
     temp=#; curoff=#; 
//at click set next to strlen         
    _1st_click == 0 ? (format!="%s" ? 
      sprintf(varstr, format, var):
      strcpy(varstr, var);
    
       next=strlen(varstr); _1st_click=1);
//*validate only number inputs + space + decimal, x, comma, minus, A-F *            
    pr=gfx_getchar(0);                                                   
   (pr >= 48 && pr <= 57) || pr == 32 || pr==120 || (pr >=44 && pr <= 46) || (pr>=65 && pr <=70) ? ( 
  //format input to temp  //append input to string  //reset next flag                         
      sprintf(temp, "%c", pr);  strcat(varstr,temp);  next=strlen(varstr);                                      
    );    
  /*backspace*/
    pr == 8 ? ( 
    //deincrement next //copy to self 
      next=max(next-=1,0); strcpy_substr(varstr,varstr, 0, next);                
    );       
  /*left arrow*/
    pr == 1818584692 ? (
    //decrease next flag //copy string from next offset (last character) to (new)temp              
      next=max(next-=1,0); strcpy_from(temp=#,varstr,next); 
    //if cursor is already offset, append curoff to temp  //copy last character to curoff                            
      strlen(curoff) ? strcat(temp,curoff); strcpy(curoff, temp); 
    //copy string minus count back to self and reset next                                                                      
      strcpy_substr(varstr,varstr, 0, next); next=strlen(varstr);         
    ); 
  /*right arrow*/
    pr == 1919379572 ? ( 
    //increment next (unless already at end of string)            
      next=min(next+=1,strlen(varstr));
    //if cursor is already offset, append 1st char of curoff to string    
      strlen(curoff) ? strncat(varstr,curoff,1);
    //if the string is not null, copy curroff to self minus 1st char                           
      strlen(varstr) ? strcpy_from(curoff,curoff,1); 
    //reset next             
      next=strlen(varstr);
    ); 
  //measure string for cursor                                              
    gfx_measurestr(varstr,strw,strh); strlen(varstr) == 0 ? strw=0;                            
  //switching ~ every second, draw cursor     
    i+=1; i == 30 ? i=0; i > 15 ? gfx_line(gfx_x+strw,y+2,gfx_x+strw,y+strh-2);
  //print string                 
    gfx_printf(varstr);
  //and cursor offset string (if present)                                           
    strlen(curoff) ? gfx_printf(curoff); 
  /*ENTER*/  //exit on ENTER or click outside the box                      
    pr == 13 || ( !mouse_in_rect(x,y,flen,gfx_texth) && mouse_cap==1 ) ? (
    //add curoffset string to string //clear the string
      strcat(varstr,curoff);  strncpy(curoff,curoff,0);   
    //clear clicked values                             
      _1st_click=0; __clicked=0;
    //only on ENTER format and set var to string   
      pr==13 ? ( 
          format=="%X" || format=="%s" ?  match(format,varstr,var): 
          match("%f",varstr,var); //sprintf(varstr, format, var););
          __clicked=0; 
      );                                                      
    );         
  ):(   
/*if box inactive*/
  //format and set var to string (tracks external changes //print string
    sprintf(varstr, format, var); gfx_printf(varstr);                                                
  );
  //!was_clicked ? rp=gfx_getchar(); //text overflow bug fix
  //match(format,varstr,var); 
  var;    
);
//                                                                                                    TEXT and STRING functions>

function num_field_cr(var,flen,format,varstr)local(x)
(
  x=gfx_x;
  num_field(var,flen,format,varstr);
  gfx_x=x; cr();
);
//                                                                                                    TEXT and STRING functions>
function get_txt_width(string)local(strw,strh)
  ( gfx_measurestr(string,strw,strh); strw ); //
function txt_w(string)local(strw,strh)//~shorter name~
  ( gfx_measurestr(string,strw,strh); strw ); 

///*print strings, left, center, just  -  gfx_x position retained
function print_leftjust(string)local(_ox)
  ( _ox=gfx_x; gfx_printf(string); gfx_x=_ox; );
function print_rightjust(string)local(_ox)
  ( _ox=gfx_x;  gfx_x=gfx_x-get_txt_width(string); 
    gfx_printf(string); gfx_x=_ox; );
function print_centerjust(string)local(_ox)
  ( _ox=gfx_x; gfx_x=(gfx_x-(get_txt_width(string)/2));  
      gfx_printf(string); gfx_x=_ox; );
///*print strings, left, center, just  -  gfx_x position moves to end of string
function draw_leftjust(string)local(_ox)
  ( _ox=gfx_x; gfx_drawstr(string);  );
function draw_rightjust(string)local(_ox)
  ( gfx_x=gfx_x-get_txt_width(string); 
    gfx_drawstr(string);  );
function draw_centerjust(string)local(_ox)
  ( gfx_x=(gfx_x-(get_txt_width(string)/2));  
      gfx_drawstr(string);  );

//                                                                                                    TEXT and STRING functions>

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Toggles variable between two values|
function print_leftjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x;y=gfx_y;w=txt_w(string);h=gfx_texth;init=1; 
  print_leftjust(string); var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var; );
function print_leftjust_toggle(string,var,offstate,onstate)
  (print_leftjust_toggle(string,var,offstate,onstate,1));

function print_centerjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x-(txt_w(string)/2);y=gfx_y;w=txt_w(string);h=gfx_texth;  
  print_centerjust(string); var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var; );
function print_centerjust_toggle(string,var,onstate,offstate)
  (print_centerjust_toggle(string,var,onstate,offstate,1));

function print_rightjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x-txt_w(string);y=gfx_y;w=txt_w(string);h=gfx_texth;
  print_rightjust(string);var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var;  );
function print_rightjust_toggle(string,var,offstate,onstate)
  (print_rightjust_toggle(string,var,offstate,onstate,1));
  
function draw_leftjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x;y=gfx_y;w=txt_w(string);h=gfx_texth;init=1; 
  draw_leftjust(string); var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var; );
function draw_leftjust_toggle(string,var,offstate,onstate)
  (draw_leftjust_toggle(string,var,offstate,onstate,1));  
  
function draw_centerjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x-(txt_w(string)/2);y=gfx_y;w=txt_w(string);h=gfx_texth;  
  draw_centerjust(string); var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var; );
function draw_centerjust_toggle(string,var,onstate,offstate)
  (print_centerjust_toggle(string,var,onstate,offstate,1));

function draw_rightjust_toggle(string,var,onstate,offstate,cap)local(x,y,w,h,init)
  (x=gfx_x-txt_w(string);y=gfx_y;w=txt_w(string);h=gfx_texth;
  draw_rightjust(string);var=mouse_in_rect_toggle(x,y,w,h,var,onstate,offstate,cap); var;  );
function draw_rightjust_toggle(string,var,offstate,onstate)
  (draw_rightjust_toggle(string,var,offstate,onstate,1));  

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ x-on ~ sets variable to value on mouse click|
function print_leftjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x;y=gfx_y;w=txt_w(string);h=gfx_texth;init=xymask(gfx_x,gfx_y); 
  print_leftjust(string);var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function print_leftjust_xon(string,var,onstate) 
  (print_leftjust_xon(string,var,onstate,1));

function print_centerjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x-(txt_w(string)/2);y=gfx_y;w=txt_w(string);h=gfx_texth; 
  print_centerjust(string); var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function print_centerjust_xon(string,var,onstate)
  (print_centerjust_xon(string,var,onstate,1));

function print_rightjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x-txt_w(string);y=gfx_y;w=txt_w(string);h=gfx_texth; 
  print_rightjust(string); var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function print_rightjust_xon(string,var,onstate)
  (print_rightjust_xon(string,var,onstate,1));
  
function draw_leftjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x;y=gfx_y;w=txt_w(string);h=gfx_texth;init=xymask(gfx_x,gfx_y); 
  draw_leftjust(string);var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function draw_leftjust_xon(string,var,onstate) 
  (draw_leftjust_xon(string,var,onstate,1));

function draw_centerjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x-(txt_w(string)/2);y=gfx_y;w=txt_w(string);h=gfx_texth; 
  draw_centerjust(string); var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function draw_centerjust_xon(string,var,onstate)
  (draw_centerjust_xon(string,var,onstate,1));

function draw_rightjust_xon(string,var,onstate,cap)local(x,y,w,h)
  (x=gfx_x-txt_w(string);y=gfx_y;w=txt_w(string);h=gfx_texth; 
  draw_rightjust(string); var=mouse_in_rect_xon(x,y,w,h,var,onstate,cap);  var; );
function draw_rightjust_xon(string,var,onstate)
  (draw_rightjust_xon(string,var,onstate,1));  
  
/*
function print_centerjust_toggle_or_y(string,var,onstate,offstate,cap1,ystate,cap2)//local(toggle)
(
  print_centerjust(string);
  __mouse=mouse_in_rect(gfx_x-(txt_w(string)/2),gfx_y,txt_w(string),gfx_texth);
  
  !_gfx_drag && __mouse && mouse_click(cap1) ? (
  var==offstate ? var=onstate:var=offstate;   
  
  ); var;
  !_gfx_drag && __mouse && mouse_click(cap2) && this.y_var!=onstate ? this.y_var=onstate;
  var;   
);
*/ 
function print_dragable_string(string,var,inc)local(x,y,w,h)
(
  x=gfx_x;y=gfx_y;w=txt_w(string); h=gfx_texth; 
  was_not_was_drag(x,y,w,h,1);
  
    var=__drag_xaxis(var,1,inc,0);  
  //  !mouse_cap ? _gfx_drag=0;
    print_leftjust(string);
    
    var; 
);  



function __print_mouse_dblclick (cap)local(i,ii)//to create a double click trigger
  (mouse_cap==cap ? (i+=1; i==1 ? ii+=6): (i=0; ii > 0 ? ii-=1); ii >= 7 ? 1:0;);
 
function print_leftjust_xon_dbl(string,var,onstate)
(
  print_leftjust(string);
  !_gfx_drag && mouse_in_rect(gfx_x,gfx_y,txt_w(string),gfx_texth) && __print_mouse_dblclick (1) && var!=onstate ? var=onstate;  
  
  var;  
);  
function print_centerjust_xon_dbl(string,var,onstate)
(
  print_centerjust(string);
  !_gfx_drag && mouse_in_rect(gfx_x-txt_w(string)/2,gfx_y,txt_w(string),gfx_texth) && __print_mouse_dblclick (1) && var!=onstate ? var=onstate;  
  
  var;  
); 
function print_rightjust_xon_dbl(string,var,onstate)
(
  print_rightjust(string);
  !_gfx_drag && mouse_in_rect(gfx_x-txt_w(string),gfx_y,txt_w(string),gfx_texth) && __print_mouse_dblclick (1) && var!=onstate ? var=onstate;  
  
  var;  
); 
//                                                                                                    TEXT and STRING functions|
//*************************************************************************************************************************************
//                                                                                                     VARIABLE SCALE functions>
//*clamps a var to a min and max value (example) var=min_max(var,0,10);  
function min_max(var,_min,_max)
  (var=max(_min,min(_max,var)); var;
  );//
//*converts a variable from one scale to another  
function variable_scale(var,minval,maxval,tgtmin,tgtmax)
  (tgtmin*(1-((var-(minval))/(maxval-minval))) + tgtmax*((var-(minval))/(maxval-minval)); 
  );
function variable_scale(var,minval,maxval,tgtmax)
  (//can be used if tgt min is 0 and tgtmax is positive 
    variable_scale(var,minval,maxval,0,tgtmax); 
  );
// fast rounding
function roundq(var)    local(fr)
  (   fr=var-var|0; fr>=.5 ? var+=1; var|0; );  
  
//*conditional returns  
function cond_return(cond,true,false) ( cond? true:false);  
  
function cond_return(var,cond,true,false)
  ( var==cond ? true:false);  
function cond_return_less(var,cond,true,false)
  ( var<cond ? true:false); 
function cond_return_greater(var,cond,true,false)
  ( var>cond ? true:false);  
  
function img_size_h(file) local(w,h) (gfx_getimgdim(file, w, h); h);
function img_size_w(file) local(w,h) (gfx_getimgdim(file, w, h); w);

function scale_img_w(file,tgtw) (variable_scale(1,0,img_size_w(file),0,tgtw) );
function scale_img_h(file,tgth) (variable_scale(1,0,img_size_h(file),0,tgth) );

function cond_scale_img(file,cond,true,false) (  cond ? scale_img_h(file,true) : scale_img_h(file,false);  );

function scale_img_ratio(file,tgtw,tgth)
  ( min( variable_scale(1,0,img_size_w(file),tgtw), variable_scale(1,0,sh=img_size_h(file),tgth)); ); 
  

//center and scale an image at gfx_x,gfx_y to target w,h *return gfx_x, gfx_y
function center_scale_img_ratio(file,tgtw,tgth)local(_ox,_oy)
  ( 
    _ox=gfx_x;_oy=gfx_y;
    gfx_getimgdim(file, w, h);    
    s=scale_img_ratio(file,tgtw,tgth);    
    gfx_x-=.5*w*s; gfx_y-=.5*h*s;    
    gfx_blit(file,scale_img_ratio(file,tgtw,tgth),0);
    _xy(_ox,_oy);
  );  
//                                                                                                     VARIABLE SCALE functions|

//                                                                                                   INDEX and MEMORY functions|
//is this variable defined / serialized ? if not use default, if so, return seralied value 
function isvar(var,default)
( !file_var(0,var) ? var=default:var=file_var(0,var);  var; );

//returns vx when i is x  - 
function v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; i==5?v=v5; i==6?v=v6; i==7?v=v7; i==8?v=v8;  i==9?v=v9; v ); 
function v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; i==5?v=v5; i==6?v=v6; i==7?v=v7; i==8?v=v8;  v );
function v_index(i,v0,v1,v2,v3,v4,v5,v6,v7)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; i==5?v=v5; i==6?v=v6; i==7?v=v7;  v );
function v_index(i,v0,v1,v2,v3,v4,v5,v6)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; i==5?v=v5; i==6?v=v6;v );
function v_index(i,v0,v1,v2,v3,v4,v5)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; i==5?v=v5; v );
function v_index(i,v0,v1,v2,v3,v4)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; i==4?v=v4; v );
function v_index(i,v0,v1,v2,v3)local(v)
( i==0?v=v0; i==1?v=v1; i==2?v=v2; i==3?v=v3; v );
function v_index(i,v0,v1,v2)local(v)
( i==0?v=v0; i==1?v=v1;  i==2?v=v2; v );


//*Puts variable valuex into memlocationx
//**not sure if this is functional!
function vX2mem_range(mempos,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)local(i)
( i=0; loop(10, mempos[i]=v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9); i+=1;); ); 
function vX2mem_range(mempos,v0,v1,v2,v3,v4,v5,v6,v7,v8)local(i)
( i=0; loop(9, mempos[i]=v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8); i+=1;); ); 
function vX2mem_range(mempos,v0,v1,v2,v3,v4,v5,v6,v7)local(i)
( i=0; loop(8, mempos[i]=v_index(i,v0,v1,v2,v3,v4,v5,v6,v7); i+=1;); ); 
function vX2mem_range(mempos,v0,v1,v2,v3,v4,v5,v6)local(i)
( i=0; loop(7, mempos[i]=v_index(i,v0,v1,v2,v3,v4,v5,v6); i+=1;); );
function vX2mem_range(mempos,v0,v1,v2,v3,v4,v5)local(i)
( i=0; loop(6, mempos[i]=v_index(i,v0,v1,v2,v3,v4,v5); i+=1;); ); 
function vX2mem_range(mempos,v0,v1,v2,v3,v4)local(i)
( i=0; loop(5, mempos[i]=v_index(i,v0,v1,v2,v3,v4); i+=1;); ); 
function vX2mem_range(mempos,v0,v1,v2,v3)local(i)
( i=0; loop(4, mempos[i]=v_index(i,v0,v1,v2,v3); i+=1;); );
function vX2mem_range(mempos,v0,v1,v2)local(i)
( i=0; loop(3, mempos[i]=v_index(i,v0,v1,v2); i+=1;); );

//list into stack
function vx_push(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)local(i)
( i=0; loop(10, stack_push(v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)); i+=1;); ); 
function vx_push(v0,v1,v2,v3,v4,v5,v6,v7,v8)local(i)
( i=0; loop(9, stack_push(v_index(i,v0,v1,v2,v3,v4,v5,v6,v7,v8)); i+=1;); ); 
function vx_push(v0,v1,v2,v3,v4,v5,v6,v7)local(i)
( i=0; loop(8, stack_push(v_index(i,v0,v1,v2,v3,v4,v5,v6,v7)); i+=1;); ); 
function vx_push(v0,v1,v2,v3,v4,v5,v6)local(i)
( i=0; loop(8, stack_push(v_index(i,v0,v1,v2,v3,v4,v5,v6)); i+=1;); ); 

/*
//                                                                                                               EDIT functions> 

//*Deprecated function from abandoned gfx editor project - some of this may be useful later on
                           
//check boolean value of location. if 0, use default and put default into location +1, if !0, use the value specified in location[1] 
//increments gmx at each call. define start in init. store end at end of @gfx . 
//serialize mem values!!!  filemem(0,gmx,gmxend-gmxstart)
function _gmx(default)local(return) 
  (  gmx[0]==0 ? ( return=gmx[1]=default; gmx[0]=1; gmx+=2 ); gmx[0]==1 ? ( return=gmx[1]; gmx+=2; );  return; );
function _gmx(d1,d2) (_gmx(d1);_gmx(d2); );
function _gmx(d1,d2,d3) (_gmx(d1,d2); _gmx(d3); );
function _gmx(d1,d2,d3,d4) (_gmx(d1,d2,d3); _gmx(d4); );
function _gmx(d1,d2,d3,d4,d5) (_gmx(d1,d2,d3,d4); _gmx(d5); );
function _gmx(d1,d2,d3,d4,d5,d6) (_gmx(d1,d2,d3,d4,d5); _gmx(d6); );
function _gmx(d1,d2,d3,d4,d5,d6,d7) (_gmx(d1,d2,d3,d4,d5,d6); _gmx(d7); );
function _gmx(d1,d2,d3,d4,d5,d6,d7,d8) ( _gmx(d1,d2,d3,d4); _gmx(d5,d6,d7,d8); );
function _gmx(d1,d2,d3,d4,d5,d6,d7,d8,d9) (_gmx(d1,d2,d3,d4,d5,d6,d7,d8); _gmx(d9); );
function _gmx(d1,d2,d3,d4,d5,d6,d7,d8,d9,d10) (_gmx(d1,d2,d3,d4,d5,d6,d7,d8,d9); _gmx(d10); ); //more?
//defines #list as named string and makes #list for object editor. use quotations i.e. _list("alias1","alias2");  
function _list(alias)  (strlen(#list) ? strcat(#list,"\n"); strcat(#list, alias); );
function _list(a1,a2) (_list(a1); _list(a2); );
function _list(a1,a2,a3) (_list(a1,a2); _list(a3); );
function _list(a1,a2,a3,a4) (_list(a1,a2,a3);_list(a4); );
function _list(a1,a2,a3,a4,a5) (_list(a1,a2,a3,a4); _list(a5); );
function _list(a1,a2,a3,a4,a5,a6) (_list(a1,a2,a3,a4,a5); _list(a6); );
function _list(a1,a2,a3,a4,a5,a6,a7) (_list(a1,a2,a3,a4,a5,a6); _list(a7); );
function _list(a1,a2,a3,a4,a5,a6,a7,a8) (_list(a1,a2,a3,a4); _list(a5,a6,a7,a8) );
function _list(a1,a2,a3,a4,a5,a6,a7,a8,a9) (_list(a1,a2,a3,a4,a5,a6,a7,a8); _list(a9); );
function _list(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) (_list(a1,a2,a3,a4,a5,a6,a7,a8,a9); _list(a10); );
/*
  function ob_ed_box()//box for ob. editor //draw #list //return x
( setcolor(0,.75); gfx_rect(0,0,txt_w(#list)+txt_w("000 , 000 , 000")+8,gfx_h);
  _xy(4,4); setcolor(0x00FF00,1);    gfx_drawstr(#list); gfx_y=4;x(4); gfx_x=txt_w(#list)+8; );

//?
function _var_edit_txt_field(place)local(memstart,display_x,frmt_code,f,format,vnum)global(gmxend)
(
  vnum=gmxend[2];
  (place*2) < vnum ? (
     memstart=gmxend[1]; 
     frmt_code=gmxend[3];
  //format notation - 0 for %G (floating point, smallest representation) 1 for %X (Hex). 2 for %+.2f
  //more logic can be added, but hex and floating point cover most everything
  //example: 5 variables 00010.  the 4th variable is hex, the rest FP     
     format=frmt_code/(10^((vnum/2-(place))-1)); 
     format/=10; format-=(format|0); format*=10; format+=.1; format|=0;
     format==0 ? f="%G"; format==1 ? f="%X"; format==2 ? f="%+.2f";      
     format==3 ? (
       f="%s";
       #this...edstr=num_field(#this...edstr,txt_w("00.000000"),f,1023-place)
       ):(
       memstart[1+(place*2)]=num_field(gmxend[4+place],txt_w("00.000000"),f,1023-place);
     );
     cr();
   );    
);
//                                                                                                        <EDIT functions>                            

function _var_edit_display()  local(display_x) //call at end of code
(
  display_x=ob_ed_box();//drawbox - returns gmx_return value
  gmx_return=display_x; _var_edit_txt_field(0); gmx_return=display_x; _var_edit_txt_field(1); gmx_return=display_x; _var_edit_txt_field(2);
  gmx_return=display_x; _var_edit_txt_field(3); gmx_return=display_x; _var_edit_txt_field(4); gmx_return=display_x; _var_edit_txt_field(5);
  gmx_return=display_x; _var_edit_txt_field(6); gmx_return=display_x; _var_edit_txt_field(7); gmx_return=display_x; _var_edit_txt_field(8);
  gmx_return=display_x; _var_edit_txt_field(9); gmx_return=display_x; _var_edit_txt_field(10);   
);  
//                                                                                                        <EDIT functions>                            


function _gmx_f_clr(gmxmem,default)local(return)
(
   f=_gmx(default);
  setcolor(f,1);
  gfx_getpixel(r,g,b);
  gfx_r==r && gfx_g==g && gmx_b==b ? gmxend[1]=gmxmem;
  
  gmxend[1]==gmxmem ? ( _list("font color"); edit_mode=4; gmxend[2]=1; gmxend[3]=1; gmxend[4]=gmxmem[1]; );
);   
  
//                                                                                                     END EDIT functions|                            

