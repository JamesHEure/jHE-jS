




@init
/**********************************************************
called at end of @gfx
Used in resizing logic
**********************************************************/
function _gfx_refresh_mouse_dblclick (cap)local(i,ii)
  (mouse_cap==cap ? (i+=1; i==1 ? ii+=6): (i=0; ii > 0 ? ii-=1); ii >= 7 ? 1:0;);
function _gfx_refresh() 
  (_gfx_refresh?_gfx_refresh=0; !_gfx_drag && !_gfx_clicked && _gfx_refresh_mouse_dblclick (cap) ? _gfx_refresh=1; ); //use only for de-bugging, etc.

function _gfx_sizecache()
 (_gfx_sizecache=gfx_w+gfx_h*256; );

function return_gfxsize()
 (gfx_w+gfx_h*256;);

function v4.5rotation()(_global.offsetbugfix=1;);


//knob ROTATION  *includes v4.6 - v5.12 hack, switch via global variable 
function rotation(x,y,radius,var)
(  _global.offsetbugfix ? gfx_blit(-1,1,var,x-radius,y-radius,radius*2,radius*2,x-radius,y-radius,radius*2,radius*2);
   !_global.offsetbugfix ? gfx_blit(-1,1,var,x-radius,y-radius,radius*2,radius*2,x-radius,y-radius,radius*2,radius*2,-x+radius,-y+radius);
 );
  
  
//Pointer style function //will add more
function pointer(x,y,radius,pointer,pointercolor)
(
  _xy(x-radius+radius/10,y); 
  setcolor(pointercolor); _xy(x,y);
  pointer==0 ? gfx_circle((x+radius/1.33)|0,y,((radius/15)+.5)|0,1,1); 
  pointer==1 ? gfx_circle((x+radius/1.5)|0,y,((radius/10)+.5)|0,1,1);
  pointer==2 ? gfx_rect((x+radius/2)|0,y-((radius/14)+.5)|0,radius/2,2*((radius/16)+.5)|0);
  pointer==3 ? gfx_rect((x+radius/2-1)|0,y-((radius/14)+.5)|0,radius/2-3,min(2*((radius/16)+.5)|0,4));
  pointer==4 ? gfx_rect((x+radius/2)|0,y-((radius/14)+.5)|0,radius/2,2*((radius/8)+.5)|0);
);

function __calculate_optimal_increment(tgtinc,varmin,varmax,tgtmin,tgtmax)local(__step,__base)
(
 __base = variable_scale(0,varmin,varmax,tgtmin,tgtmax);
 __step = variable_scale(tgtinc,varmin,varmax,tgtmin,tgtmax);
 __step-__base;
);

/*
EXAMPLE for knobs. set the variable equal to the function. variable must also be an input of the function.

var=png_rotary(var,png0,png1,size,inc);

*/

//blits and rotates a pair of png images. knob, and pointer
//simplified for endless rotary control - wants a normalized input (0-1) (i think? ha ha)
function png_rotary(var,png0,png1,size,inc)
local(ox,oy,scale,scale2,w,h,tempvalue)
(
  ox=gfx_x; oy=gfx_y;
  gfx_getimgdim(png0, w, h); //get dimentions of base image
  size!=-1 ? scale=scale_img_h(png0,size):scale=1;//scale the image
  scale2=variable_scale(scale,0,img_size_h(png1),0,h);//scale POINTER to match base  
  _xy(gfx_x-(w*scale)/2,gfx_y-(h*scale)/2);  //set scaled xy positions 
  //draw and rotate image - if there is no "pointer"  (png1=-1) rotate the whole buisness. 
  tempvalue=var;
  png1>=0 ? (gfx_blit(png0,scale, 0); gfx_blit(png1,scale2,(tempvalue)*0.017453) ):( gfx_blit(png0,scale, (tempvalue)*0.017453) );        
  was_not_was_drag(gfx_x,gfx_y,(w*scale),(h*scale),1,9); //set drag area  
  var=__drag_yaxis(var,1,inc,9,inc/10,0);//mouse drag enable
  _xy(ox,oy);
  var; //return var  
);
  
//blits and rotates a pair of png images. knob, and pointer
//start and end are in degrees 
//size == -1 uses the png0 image size
function png_knob_a(var,vardefault,varmin,varmax,start,end,png0,png1,size,inc)
local(w,h,tempvalue,scale,scale2,ox,oy)
(
  ox=gfx_x; oy=gfx_y;
  gfx_getimgdim(png0, w, h); //get dimentions of base image
  size!=-1 ? scale=scale_img_h(png0,size):scale=1;//scale the image
  scale2=variable_scale(scale,0,img_size_h(png1),0,h);//scale POINTER to match base  
  _xy(gfx_x-(w*scale)/2,gfx_y-(h*scale)/2);  //set scaled xy positions    
  mouse_in_rect(gfx_x,gfx_y,(w*scale),(h*scale)) && mouse_dblclick(1) ? var=vardefault; //default var on dblclick
  tempvalue=variable_scale(var,varmin,varmax,start,end); //scale the input to a tempvalue 
  //draw and rotate image - if there is no "pointer"  (png1=-1) rotate the whole buisness. 
  png1>=0 ? (gfx_blit(png0,scale, 0); gfx_blit(png1,scale2,(tempvalue)*0.017453) ):( gfx_blit(png0,scale, (tempvalue)*0.017453) );        
  was_not_was_drag(gfx_x,gfx_y,(w*scale),(h*scale),1,9); //set drag area  
  inc=__calculate_optimal_increment(inc,varmin,varmax,start,end); //auto set increment
  tempvalue=__drag_yaxis(tempvalue,1,inc,9,inc/10,0);//mouse drag enable
  var=variable_scale(tempvalue,start,end,varmin,varmax); //scale the input back
  var=min_max(var,varmin,varmax); //clamp to min max slider var
  _xy(ox,oy);
  var; //return var
);

function png_knob_a(var,vardefault,varmin,varmax,start,end,png0,png1,size)
( png_knob_a(var,vardefault,varmin,varmax,start,end,png0,png1,size,1) );


//
function LCD(w,h,color,edgeZ,saturation)local(_oa,x,y,txt)
(
  txt=pack_rgb(); _oa=gfx_a; x=gfx_x;y=gfx_y;
  gfx_x-=1;
  setcolor(0,.5); gfx_rect(x-1,y-1,w+3,h+3);
  setcolor(0,.25);  gfx_rect(x-2,y-2,w+4,h+4);
  gfx_a=_oa;
  edged_grad_h(x,y,w,h,color,edgeZ,saturation);
  setcolor(txt,_oa);
); 

function LCD(w,h,color) ( LCD(w,h,color,(h/12)|0,.75) ); 

function LCD(w,h,color,str)(LCD(w,h,color); gfx_y-=1; gfx_x+=w/2; print_centerjust(str););

//The formula to go from linear amplitude to dB is db = 20 * log10(amp), 
//and the other way around it is amp = 10 ^ (db / 20). 
function amp_to_db(amp) (20*log10(amp));
function db_to_amp(db) (10 ^ (db / 20));
  


function dragable_parameter_box(var,vardefault,varmin,varmax,w,h)
local(bx,by,tempvalue,_cache_drag,inc)global(mouse_cap,gfx_x,gfx_y,_gfx_drag)
(
  bx=gfx_x; by=gfx_y;
  inc=__calculate_optimal_increment(1,varmin,varmax,0,1);
  mouse_in_rect(bx,by,w,h) && mouse_dblclick(1) ? var=vardefault; //default var on dblclick 
  tempvalue=variable_scale(var,varmin,varmax,0,1); //scale the input to a tempvalue  
  gfx_rect(bx,by,w*tempvalue,h);//draw rectangle
  was_not_was_drag((bx+w*tempvalue)-16,by,32,h,1,9); //set drag area
  _gfx_drag == xymask(bx+w*tempvalue-16,by) ? _cache_drag=_gfx_drag=xymask(bx,by);//cache drag mask, since location is variable (get it! ha! variable!)
  tempvalue=__drag_xaxis(tempvalue,1,inc,9,inc/10,0);//mouse drag effects tempvalue  
  _gfx_drag == _cache_drag && !mouse_cap ? _gfx_drag=_cache_drag=0;//reset masks 
  var=variable_scale(tempvalue,0,1,varmin,varmax); //scale the input back
  var=min_max(var,varmin,varmax); //clamp to min max slider var
  var; //return var
);

//set gfx_x center of fader. gfx_y to 0 value.
function v_fader(var,var_default,var_min,var_max,throw_height,cap_image,scale,rotation,RbuttonStr)
local(image_w,image_h,destx,desty,cache_y,drawx,drawy,tempdefault,tempvalue,t_value)
(
  gfx_getimgdim(cap_image,image_w,image_h);
  tempdefault=variable_scale(var_default,var_min,var_max,0,1);
  tempvalue=variable_scale(var,var_min,var_max,0,1); //scale the input to normalized tempvalue 
  drawx=gfx_x-(image_w*.5); 
  drawy=gfx_y-(tempvalue*throw_height)-image_h*.5;
  mouse_in_rect(drawx,drawy,image_w,image_h) && mouse_dblclick(1) ? tempvalue=tempdefault;
  RbuttonStr!=-1 && mouse_in_rect(drawx,drawy,image_w,image_h) && mouse_click(2) ? gfx_showmenu(Rbuttonstr);
    
  gfx_blit(cap_image,scale,rotation, 0, 0, image_w, image_h, drawx, drawy, image_w, image_h);
  
  _gfx_drag == _cache_drag && !mouse_cap ? _gfx_drag=_cache_drag=0;//reset masks 
  was_not_was_drag(drawx,drawy,image_w,image_h,1,9); //make drag mask
  _gfx_drag == xymask(drawx,drawy) ? (
    _cache_drag=_gfx_drag=xymask(gfx_x,gfx_y);//cache drag mask, since location is variable (get it! ha! variable!)
    _cache_y=mouse_y;
  );
  _cache_drag==xymask(gfx_x,gfx_y) && mouse_y!=_cache_y ? (
    tempvalue=variable_scale(mouse_y,gfx_y,gfx_y-throw_height,0,1);  
  );      
 // t_value=variable_scale(tempvalue^throw_scale,0,1,0,1);
 // tempvalue=variable_scale(tempvalue^throw_scale,0,1,0,1); //scale the input to normalized tempvalue
  varout=variable_scale(tempvalue,0,1,var_min,var_max); //scale the input back
  var=min_max(varout,var_min,var_max); //clamp to min max slider var
  var; //return var
);

function v_fader(var,var_default,var_min,var_max,throw_height,cap_image,scale,rotation)
( v_fader(var,var_default,var_min,var_max,throw_height,cap_image,scale,rotation,1));

//set gfx_y center of fader. gfx_x to 0 value.
function h_fader(var,var_default,var_min,var_max,throw_width,cap_image,scale,rotation)
local(image_w,image_h,destx,desty,cache_y,drawx,drawy,tempdefault,tempvalue)
(
  gfx_getimgdim(cap_image,image_w,image_h);
  tempdefault=variable_scale(var_default,var_min,var_max,0,1);
  tempvalue=variable_scale(var,var_min,var_max,0,1); //scale the input to a tempvalue 
  drawx=gfx_x+(tempvalue*throw_width)-(image_w*.5); 
  drawy=gfx_y-image_h*.5;
  mouse_in_rect(drawx,drawy,image_w,image_h) && mouse_dblclick(1) ? tempvalue=tempdefault;
  
    
  gfx_blit(cap_image,scale,rotation, 0, 0, image_w, image_h, drawx, drawy, image_w, image_h);
  
  _gfx_drag == _cache_drag && !mouse_cap ? _gfx_drag=_cache_drag=0;//reset masks 
  was_not_was_drag(drawx,drawy,image_w,image_h,1,9); //make drag mask
  _gfx_drag == xymask(drawx,drawy) ? (
    _cache_drag=_gfx_drag=xymask(gfx_x,gfx_y);//cache drag mask, since location is variable (get it! ha! variable!)
    _cache_x=mouse_x;
  );
  _cache_drag==xymask(gfx_x,gfx_y) && mouse_x!=_cache_x ? (
    tempvalue=variable_scale(mouse_x,gfx_x,gfx_x+throw_width,0,1);  
  );      
  var=variable_scale(tempvalue,0,1,var_min,var_max); //scale the input back
  var=min_max(var,var_min,var_max); //clamp to min max slider var
  var; //return var
);


function rack_rails(unit_h,buffer,tmpbuffer,offset)local(rw,tmpinit,init,tmp_h,hs,ho,h1,i,hx,lo0p)
(
   rw=24;
//draw inital shape   
  !tmpinit  ? ( 
    tmp_h=gfx_h; 
    __toblack(tmpbuffer);
    __initoffscreenbuffer(tmpbuffer,rw,tmp_h); gfx_mode=2;
    edged_grad_w(0,0,rw,tmp_h,0x222222,2,1.25,.83); gfx_mode=0; tmpinit=1;
  ); 
//draw full on both sides, and re-buffer  
  buffer!=-1 && !init  || _gfx_refresh ? (
     __initoffscreenbuffer(buffer);
  // copy, rotate, stretch rail shape into buffer
    offset? lo0p=(gfx_h-(2*offset))/unit_h:lo0p=(gfx_h/unit_h)+1;  lo0p|=0;
    offset ? uh=lo0p*unit_h:uh=gfx_h;
    gfx_setimgdim(buffer,gfx_w,gfx_h);
    gfx_dest=buffer; gfx_mode=2;
    gfx_blit(tmpbuffer,1,0,   0, 0, rw, tmp_h,   offset,          offset, rw, uh, 0, 0); 
    gfx_blit(tmpbuffer,1,$pi, 0, 0, rw, tmp_h,   gfx_w-rw-offset, offset, rw, uh, 0, 0);
     
    gfx_mode=0;
    //draw holes over it   
    hs=rw/6;//holesize
    ho=unit_h*.35714;//spacing of holes
    h1=(unit_h/2)-ho;//location of first hole in u
    setcolor(0,.9);
    i=0;
    loop ( lo0p, 
    hx=offset+h1+unit_h*i;
    loop(3, gfx_circle(offset+rw/2,hx,hs,1,1);hx+=ho;); i+=1;
    );     
    i=0;
    loop ( lo0p, 
    hx=offset+h1+unit_h*i;
    loop(3, gfx_circle(gfx_w-(rw/2)-offset,hx,hs,1,1);hx+=ho;); i+=1;
    );    
    init=1; 
  );
 
//redraw into main frame  
  buffer!= -1 ? (
   gfx_dest=-1;
   gfx_blit(buffer,1,0,    0, 0, gfx_w, gfx_h,     0, 0, gfx_w, gfx_h,    0, 0);
   
  ); 
////reinit
  _gfx_sizecache!==return_gfxsize()  ? init=0;  
  buffer == -1 ? (
    offset? lo0p=(gfx_h-(2*offset))/unit_h:lo0p=(gfx_h/unit_h)+1;  lo0p|=0;
    offset ? uh=lo0p*unit_h:uh=gfx_h;
    gfx_setimgdim(buffer,gfx_w,gfx_h);
    gfx_dest=buffer;
    gfx_blit(tmpbuffer,1,0,   0, 0, rw, tmp_h,   offset,          offset, rw, uh, 0, 0); 
    gfx_blit(tmpbuffer,1,$pi, 0, 0, rw, tmp_h,   gfx_w-rw-offset, offset, rw, uh, 0, 0); 
    //draw holes over it   
    hs=rw/6;//holesize
    ho=unit_h*.35714;//spacing of holes
    h1=(unit_h/2)-ho;//location of first hole in u
    setcolor(0,.7);
    i=0;
    loop ( lo0p, 
    hx=offset+h1+unit_h*i;
    loop(3, gfx_circle(offset+rw/2,hx,hs,1,1);hx+=ho;); i+=1;
    );     
    i=0;
    loop ( lo0p, 
    hx=offset+h1+unit_h*i;
    loop(3, gfx_circle(gfx_w-(rw/2)-offset,hx,hs,1,1);hx+=ho;); i+=1;
    ); 
   
  );  
); 

function rack_rails(unit_h,buffer,tmpbuffer)  ( rack_rails(unit_h,buffer,tmpbuffer,0) );


function __rackscrew(x,y,radius)local(_oa)
 (
  _oa=gfx_a;
//underlay shadow
  setcolor(0x242424,.03135); 
  //gfx_a=.03135;
//draw edge, backfill
  gfx_a=1; gfx_circle(x,y,(radius+1)|0,1,1);
//draw mask guide 
  mask_guide_pink(127); gfx_circle(x,y,(radius-1),0,0);    
//get surrounding pixels
  __pushcorners(x-radius,y-radius,radius*2,radius*2,127);    
//draw rectangle 
  gfx_a=.1;
  edged_grad_h(x-radius,y-radius,radius*2,radius*2,0xFFFFFF,radius/1.5,4); 
  gfx_a=.35; rotation(x,y,radius,.55);
  gfx_a=1; rotation(x,y,radius,-.34);
//redraw corners
  __popcorners(x-radius,y+radius,radius*2,radius*2); 
//slots
  setcolor(0,.6);
  gfx_rect(x-1,y-radius/2,3,radius+1);
  gfx_rect(x-radius/2,y-1,radius+1,3);  
  gfx_a=_oa
);

function rackscrews(unit_h,u,position,offset)local(rw,s,sp,mdl)
(
rw=24; 
s=6; 
sp=unit_h*.35714;

mdl=offset+(unit_h*(position-1))+(unit_h*u/2);

  __rackscrew(rw/2+offset,mdl-sp,s) ;
  __rackscrew(rw/2+offset,mdl+sp,s) ;
  __rackscrew((gfx_w-rw/2)-offset,mdl-sp,s) ;
  __rackscrew((gfx_w-rw/2)-offset,mdl+sp,s) ;
);

function __rackface_preset(color,edge,saturation,gradient_center,q,mod_width,mod2_width,x2,mod3_width,mod_alpha,gradient_alpha)
(
    gfx_a=mod_alpha;
    modulated_horizontal_underlay(0,0,560,70,color,edge,saturation,gradient_center,q,mod_width,mod2_width,x2,mod3_width);
    gfx_a=gradient_alpha; edged_grad_h(0,0,560,70,color,edge,saturation,gradient_center); gfx_a=1;
    //setcolor(backfill_color,backfill);// backfill; 
    color; //return color
);

function __rackface_preset_list(preset,color)local(color,alpha,i)
(
//__rackface_preset(color, edge, saturation, gradient_center, q, mod_width, mod2_width, x2, mod3_width, mod_alpha, gradient_alpha)
 
  alpha=gfx_a;
  i=0;
  preset==i ? c=__rackface_preset(color,2,1,.5,3,0,0,0,0,.01,alpha); i+=1;
  preset==i ? c=__rackface_preset(color,2,1.5,.5,3,0,0,0,0,.01,alpha); i+=1;
  preset==i ? c=__rackface_preset(color,2,1.5,.5,3,12,80,94,12,.01,alpha); i+=1;
  preset==i ? c=__rackface_preset(color,4,.25,.5,2,24,0,280,24,.01,alpha); i+=1;
  preset==i ? c=__rackface_preset(color,4,.5,.5,2,80,94,280,80,.01,alpha); i+=1;
  
  
  preset==i ? c=__rackface_preset(0x565758,2,1.5,.5,3,12,80,94,12,.01,1); i+=1;
  preset==i ? c=__rackface_preset(0x303739,2,1.5,.5,3,12,80,94,12,.01,1); i+=1;
  preset==i ? c=__rackface_preset(0xB0171F,4,.25,.5,2,24,0,280,24,.01,.5); i+=1;
  preset==i ? c=__rackface_preset(0x121590,4,.25,.5,2,24,0,280,24,.05,1); i+=1;
  preset==i ? c=__rackface_preset(0xB0171F,4,.25,.5,2,24,0,280,24,.05,1); i+=1;
  preset==i ? c=__rackface_preset(0xB0171F,4,.25,.5,2,24,0,280,24,.05,1); i+=1;
  preset==i ? c=__rackface_preset(0x222222,4,.5,.5,2,80,94,280,80,.01,1); i+=1;
  preset==i ? c=__rackface_preset(0x444444,1,.2,.5,4,80,94,280,80,.01,1); i+=1;
  preset==i ? c=__rackface_preset(0x333333,1,.2,.5,4,80,94,280,80,.01,1);i+=1;
  preset==i ? c=__rackface_preset(0x222222,1,.2,.5,4,80,94,280,80,.01,1); i+=1;
  preset==i ? c=__rackface_preset(0x565758,1,.2,.5,4,80,94,280,80,.01,1); i+=1;
  
  c;
);


//if preset = -(x), coordinates will pull from a list defined by user (how?)
function rackface(unit_h,u,position,offset,preset,buffer,tmpbuffer)local(tmpinit,init,rx,ry,rw,presetcache,color)//instance(presetcache)
(
  color=pack_rgb();
  _gfx_sizecache!=return_gfxsize()  ? init=0;
  //color=pack_rgb(); alpha=gfx_a;// setcolor(color,alpha);
  //_gfx_refresh ? init=0;
   presetcache!=preset*position || colorcache!=pack_rgb() ? ( tmpinit=0; init=0; );
  !tmpinit  ? (
    
    //__toblack(tmpbuffer); //__toblack(buffer);
    __initoffscreenbuffer(tmpbuffer,560,70*u); 
    gfx_mode=2; 
    //backfill=
    // a_test=color;a_a=alpha;
    //setcolor(color);
    c=__rackface_preset_list(preset,color);
    presetcache=preset*position;
    //presetchange=0;
    //gfx_mode=0;
    tmpinit=1;
  );
  !init ? (
   // __clearoffscreenbuffer(buffer);
    __initoffscreenbuffer(buffer);
    ry=offset+(unit_h*(position-1));
    rx=offset;
    rw=gfx_w-offset*2;
    gfx_mode=2;
    gfx_blit(tmpbuffer,1,0, 0,0,560,70, rx,ry,rw,unit_h*u);
    gfx_mode=0; 
    init=1;
  ); 
  //presetcache=preset;
  ry=offset+(unit_h*(position-1));
  rx=offset;
  rw=gfx_w-offset*2;
  gfx_dest=-1;
  preset != 0 ? (
    gfx_mode=2;
    gfx_blit(buffer,1,0, rx,ry,rw,unit_h*u,  rx,ry,rw+1,unit_h*u, 0,0); 
    gfx_mode=0;    
  ); 
  _gfx_sizecache=return_gfxsize();   
  colorcache=color;
  c;
);   

function outer_arc(x,y,arc_r,rotation,degf,arc_w,arc_color,var)
local(i,density,l,radff,rad0,radv,radvv,_orbg,_oa,fillrad)
( 
    _orbg=pack_rgb();  _oa=gfx_a; x|=0; y|=0;
    rad0=rotation*0.017453;     radff=(degf+rotation)*0.017453;
    arc_w<2?(density=1;l=1;); arc_w>=2?(density=.5; l=2;);
  //draw bgnd arc 
    i=0;
    loop(arc_w*l,
        gfx_arc(x,y,(arc_r)-i,rad0,radff,1);
        i+=density;        
    ); 
  //draw var-filled arc      
    setcolor(arc_color); 
    radvv=(var+rotation)*0.017453;    
    i=0;
    loop((arc_w*l),
      gfx_arc(x,y,(arc_r)-i,rad0,radvv,.99);
      i+=density;
    );    
    i=0; 
    _xy(x,y); gfx_a=_oa; setcolor(_orbg);   
);//



//use current color, x, y.
//non-png based knob
function knob_metal(var,radius,edge,shadow,saturation,color,pointer,pointercolor,rotation,hlcenter,xalpha,xrotation)
local(i,r,g,b,bcolor,x,y,a)
(
// cache values
  bcolor=pack_rgb(); x=gfx_x|0; y=gfx_y|0; //a=gfx_a;
  //rotation*=0.017453;
  hlcenter=radius*hlcenter;
  radius=min(32,radius)|0;
  a=.5;
//underlay shadow
  setcolor(0,.0314); i=16;
  shadow ? ( loop(8, gfx_circle(x,y+i-i/1.5,radius,1,1); i-=1; ); gfx_circle(x,y+1,radius+4,1,1); );  
//bezel/casing below
  setcolor(bcolor,a*2);  gfx_circle(x,y,(radius),1,1);    
//draw mask guide 
//gfx_setimgdim(127,max(gfx_w,x+radius),max(gfx_h,y+radius));
//gfx_setimgdim(127,gfx_w+radius+2,gfx_h+radius+2);

  gfx_dest=127;
  setcolor(255,0,255,1);   gfx_circle(x,y,(radius-1),0,0); 
   gfx_circle(x+1,y,(radius-1)|0,0,0);   //fudging right side
//get surrounding pixels
  //_xy(x,y); 
 // gfx_dest=-1;
 //radius+=1;
   __pushcorners(max(1,min(gfx_w-radius,x-radius)),max(1,min(gfx_h-radius,y-radius)),(radius*2),(radius*2),127);
  //radius > 32 ?  
//draw rectangle 
  //radius-=1;
gfx_dest=-1;
  setcolor(color,a);
  edged_grad_h(x-radius,y-radius,radius*2,radius*2,color,edge,saturation,hlcenter); 
//cache color for edge
  _xy(x,y-radius/2);   
  gfx_getpixel(r,g,b);   
//rotation 
//gfx_dest=-1;
 gfx_a=xalpha; 
 rotation(x,y,radius,xrotation);//X rotate underlay "blur" alpha
 gfx_a=1;
 rotation(x,y,radius,rotation);// rotatate underlay full alpha
 rotation(x,y,radius,-var);// offset rotation from pointer variable 
//do pointer
  gfx_a=.9;
  pointer(x,y,radius,pointer,pointercolor);
//POINTER ROTATION  
  gfx_a=1;
  rotation(x,y,radius,var);
//redraw corners
  //radius+=1;
   __popcorners(x-radius,y+radius,(radius*2),radius*2);    
  //radius-=1; 
//outline / edging                                               
  gfx_r=r;gfx_g=g;gfx_b=b;gfx_a=a/2;
  _xy(x,y); 
  i=1;
  loop (9, gfx_circle(x,y,(radius-i),0,1); i-=.15; );
  gfx_a=a/8;gfx_circle(x,y,radius-1,0,1);
  gfx_a=a/4;gfx_circle(x,y,radius-.5,0,1);  
  gfx_a=a/2;gfx_circle(x,y,radius,0,1);
 // gfx_a=a;gfx_circle(x,y,radius,0,1);
  setcolor(0,.1); gfx_circle(x,y,radius-.5,0,1); 
  setcolor(0xFFFFFF,.07125); gfx_circle(x,y,radius-1.5,0,1); 
  setcolor(0xFFFFFF,.035);gfx_circle(x,y,radius-2,0,1); 
  setcolor(0xFFFFFF,.0125);gfx_circle(x,y,radius+.5,0,1); 
  setcolor(0x0,.025);gfx_circle(x,y,radius+1,0,1);    
  //reset color
  setcolor(bcolor,a); _xy(x,y); 
);

//function fader(var,throw_height,bg_img,cap_img) 

/* NOT FUNCTIONAL
function knob_m(var)
(
  stack_pop(xrotation); stack_pop(xalpha);stack_pop(hlcenter);stack_pop(rotation);stack_pop(pointercolor);
  stack_pop(pointer);stack_pop(color);stack_pop(saturation);stack_pop(shadow);stack_pop(edge);stack_pop(radius);
  stack_pop(end); stack_pop(start); stack_pop(varmax); stack_pop(varmin); stack_pop(vardefault); stack_pop(flag);
  knob_metal(var,radius,edge,shadow,saturation,color,pointer,pointercolor,rotation,hlcenter,xalpha,xrotation);
  
  mouse_in_rect(gfx_x-radius,gfx_y-radius,radius*2,radius*2) && mouse_dblclick(1) ? var=vardefault; //default var on dblclick 
  tempvalue=variable_scale(var,varmin,varmax,start,end); //scale the input to a tempvalue
  //draw and rotate image - if there is no "pointer"  (png1=-1) rotate the whole buisness.
        
  was_not_was_drag(gfx_x-radius,gfx_y-radius,radius*2,radius*2,1,9); //set drag area
  tempvalue=drag_yaxis(tempvalue,xymask(gfx_x,gfx_y),1,6,9,.6,0);//mouse drag effects tempvalue
  var=variable_scale(tempvalue,start,end,varmin,varmax); //scale the input back
  var=min_max(var,varmin,varmax); //clamp to min max slider var
  var; //return var
  
);  
  */ 
  
/* 
function rectstyles(rectstyle,x,y,boxw,boxh,boxr,boxg,boxb,gradstring)
local(_oa,radius,ol)
(
_oa=gfx_a;
rectstyle >= 300 ?  (
  ol=.5;
  rectstyle < 700 ? ol=1;
  rectstyle < 600 ? ol=1.25;
  rectstyle < 500 ? ol=1.50;
  rectstyle < 400 ? ol=1.75;
  );
rectstyle == 0 ? gfx_roundrect(x,y,boxw,boxh,0);
  rectstyle >=1 && rectstyle < 100 ? (
    radius=rectstyle;
    gfx_roundrect(x,y,boxw,boxh,radius);
  );
  rectstyle == 100 ? gfx_rect(x,y,boxw,boxh);
  rectstyle > 100 && rectstyle < 200 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,radius);
  );
  rectstyle >= 200 && rectstyle < 300 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill_grad(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,gradstring,radius)  
  );
  rectstyle >=300 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill_grad(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,gradstring,radius);
    setcolor(boxr*ol,boxg*ol,boxb*ol); 
    gfx_a=1; gfx_roundrect(x,y,boxw,boxh,radius,1); 
    //gfx_a=.5; gfx_roundrect(x,y,boxw,boxh,radius,1); 
  );
gfx_a=_oa;  
radius; // return radius (for higlight, etc...)
);

function rectstyles(rectstyle,x,y,boxw,boxh,boxr,boxg,boxb,gradstring,graddiv)
local(_oa,radius,ol)
(
_oa=gfx_a;
rectstyle >= 300 ?  (
  ol=.5;
  rectstyle < 700 ? ol=1;
  rectstyle < 600 ? ol=1.25;
  rectstyle < 500 ? ol=1.50;
  rectstyle < 400 ? ol=1.75;
  );
rectstyle == 0 ? gfx_roundrect(x,y,boxw,boxh,0);
  rectstyle >=1 && rectstyle < 100 ? (
    radius=rectstyle;
    gfx_roundrect(x,y,boxw,boxh,radius);
  );
  rectstyle == 100 ? gfx_rect(x,y,boxw,boxh);
  rectstyle > 100 && rectstyle < 200 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,radius);
  );
  rectstyle >= 200 && rectstyle < 300 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill_grad(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,gradstring,radius,graddiv)  
  );
  rectstyle >=300 ? (
    radius=rectstyle%100;
    gfx_roundrect_fill_grad(x,y,boxw,boxh,boxr,boxg,boxb,gfx_a,gradstring,radius,graddiv);
    setcolor(boxr*ol,boxg*ol,boxb*ol); 
    gfx_a=1; gfx_roundrect(x,y,boxw,boxh,radius,1); 
    //gfx_a=.5; gfx_roundrect(x,y,boxw,boxh,radius,1); 
  );
gfx_a=_oa;  
radius; // return radius (for higlight, etc...)
);

function _parameter_box(x,y,boxw,boxh,boxr,boxg,boxb,txtr,txtg,txtb,var,rectstyle,gradstring)//,maxval,defaultval,minval,str_format)
local (range, reset, setX, strw, was_mouse, drawval)//instance(drawpos,drawvv,valuefff) 
(   
  x+y*256==was_mouse && mouse_cap == 1 ? 
    var=((max(0,min(mouse_x-x,boxw)))/boxw); 
  drawval=boxw*var;  
  setcolor(boxr,boxg,boxb); //set box color
  radius=rectstyles(rectstyle,x,y,max(2,drawval),boxh,boxr,boxg,boxb,gradstring,boxw);
  was_mouse == 0 && mouse_in_rect(x+drawval-16, y, 32 ,boxh) ? was_mouse=x+y*256; 
  was_mouse==x+y*256 ? (
    //setcolor(valr,valg,valb,1);
     setcolor(boxr*2,boxg*2,boxb*2,1);
    gfx_roundrect(x+1,y+1,max(2,drawval-2),boxh-2,radius,1);
  );//draw mouse - on highlight    
  !mouse_cap&3 ? was_mouse=0;  
  setcolor(valr,varg,valb,1);//set the text color
  gfx_y=y;   
  gfx_x=x+drawval;
  var;
); 
